{"version":3,"sources":["Cell.tsx","GameOfLifeBoard.tsx","App.tsx","index.tsx"],"names":["Rect","styled","rect","Cell","alive","x","y","dispatch","onClick","useCallback","type","payload","fill","width","height","data-x","data-y","data-alive","Toolbar","menu","Svg","svg","initializer","cellStates","Array","map","_","i","Math","floor","getCell","state","getIndex","reducer","action","index","cell","slice","splice","states","aliveCount","filter","Boolean","getNeighbours","reduce","c","n","GameOfLifeBoard","useReducer","svgWidth","svgHeight","viewBox","s","key","Main","main","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.36edb6b1.chunk.js","sourcesContent":["import React, { FC, useCallback } from 'react'\nimport styled from 'styled-components'\n\nconst Rect = styled.rect`\n  cursor: pointer;\n`\n\nconst Cell: FC<CellState & { dispatch: React.Dispatch<BoardAction> }> = ({\n  alive,\n  x,\n  y,\n  dispatch,\n}) => (\n  <Rect\n    onClick={useCallback(\n      () => dispatch({ type: 'toggle-cell', payload: { x, y } }),\n      [dispatch, x, y]\n    )}\n    fill={alive ? '#3084e3' : '#dfe6e9'}\n    width={9}\n    height={9}\n    x={x * 10 + 1}\n    y={y * 10 + 1}\n    data-x={x}\n    data-y={y}\n    data-alive={alive}\n  />\n)\n\nexport default Cell\n","import React, { FC, useReducer } from 'react'\nimport styled from 'styled-components'\nimport Cell from './Cell'\n\nconst Toolbar = styled.menu`\n  display: grid;\n  gap: 0.5em;\n  grid-template-columns: repeat(2, 1fr);\n  margin-top: 0;\n  padding: 0;\n  button {\n    background: none;\n    padding: 0.5em;\n    border-radius: 0.5em;\n    border: 1px solid #a2a2a2;\n  }\n`\n\nconst Svg = styled.svg`\n  flex-grow: 1;\n  width: 100%;\n`\n\nconst initializer: (arg: {\n  width: number\n  height: number\n}) => React.ReducerState<React.Reducer<BoardState, BoardAction>> = ({\n  width,\n  height,\n}) => ({\n  width,\n  height,\n  cellStates: Array(width * height)\n    .fill(null)\n    .map((_, i) => ({\n      alive: false,\n      x: i % height,\n      y: Math.floor(i / width),\n    })),\n})\n\nconst getIndex = (state: BoardState, x: number, y: number): number =>\n  x + y * state.width\n\nconst getCell = (state: BoardState, x: number, y: number): CellState | null => {\n  // wrap x & y\n  if (x < 0) x += state.width\n  if (x >= state.width) x -= state.width\n  if (y < 0) y += state.height\n  if (y >= state.height) y -= state.height\n\n  return state.cellStates[getIndex(state, x, y)]\n}\n\nconst getNeighbours = (state: BoardState, { x, y }: CellState) =>\n  [\n    getCell(state, x - 1, y - 1),\n    getCell(state, x, y - 1),\n    getCell(state, x + 1, y - 1),\n    getCell(state, x - 1, y),\n    getCell(state, x + 1, y),\n    getCell(state, x - 1, y + 1),\n    getCell(state, x, y + 1),\n    getCell(state, x + 1, y + 1),\n  ].filter(Boolean)\n\nconst reducer: React.Reducer<BoardState, BoardAction> = (state, action) => {\n  switch (action.type) {\n    case 'reset':\n      return initializer({ width: state.width, height: state.height })\n    case 'toggle-cell': {\n      const { x, y } = action.payload\n      const index = x + y * state.height\n      const cell = state.cellStates[index]\n      const cellStates = state.cellStates.slice(0)\n      cellStates.splice(index, 1, { x, y, alive: !cell.alive })\n      return {\n        ...state,\n        cellStates,\n      }\n    }\n    case 'next-generation': {\n      const cellStates = state.cellStates.map((cell, i, states) => {\n        const neighbours = getNeighbours(state, cell)\n        const aliveCount = neighbours.reduce(\n          (c, n) => c + (n?.alive ? 1 : 0),\n          0\n        )\n        return {\n          ...cell,\n          alive: aliveCount === 3 || (cell.alive && aliveCount === 2),\n        }\n      })\n      return {\n        ...state,\n        cellStates,\n      }\n    }\n  }\n}\n\nconst GameOfLifeBoard: FC<{\n  width: number\n  height: number\n}> = ({ width, height }) => {\n  const [{ cellStates }, dispatch] = useReducer<\n    React.Reducer<BoardState, BoardAction>,\n    {\n      width: number\n      height: number\n    }\n  >(reducer, { width, height }, initializer)\n\n  const svgWidth = width * 10 + 1\n  const svgHeight = height * 10 + 1\n  return (\n    <>\n      <Toolbar>\n        <button onClick={() => dispatch({ type: 'reset' })}>Reset</button>\n        <button onClick={() => dispatch({ type: 'next-generation' })}>\n          Next generation\n        </button>\n      </Toolbar>\n      <Svg\n        fill=\"white\"\n        width={svgWidth}\n        height={svgHeight}\n        viewBox={`0 0 ${svgWidth} ${svgHeight}`}>\n        {cellStates.map((s, i) => (\n          <Cell dispatch={dispatch} key={i} {...s} />\n        ))}\n      </Svg>\n    </>\n  )\n}\n\nexport default GameOfLifeBoard\n","import React from 'react'\nimport styled from 'styled-components'\nimport GameOfLifeBoard from './GameOfLifeBoard'\n\nconst Main = styled.main`\n  height: 100vh;\n  padding: 1em;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`\n\nconst App = () => {\n  return (\n    <Main>\n      <h1>Cell Simulator</h1>\n      <GameOfLifeBoard width={50} height={50} />\n    </Main>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}